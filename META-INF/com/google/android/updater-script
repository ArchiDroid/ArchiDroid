#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ui_print(">>> ArchiDroid is now loading...");
assert(getprop("ro.product.device") == "m0" ||
	getprop("ro.build.product") == "m0" || 
	getprop("ro.product.device") == "i9300" ||
	getprop("ro.build.product") == "i9300" || 
	getprop("ro.product.device") == "GT-I9300" ||
	getprop("ro.build.product") == "GT-I9300" ||
	abort("This package is for device: m0,i9300,GT-I9300; this device is " + getprop("ro.product.device") + "."););

ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Ready!");
set_progress(0.01);


################
### RECOVERY ###
################

### BOOT ###
if file_getprop("/tmp/aroma-data/archidroidrecovery.prop", "recovery") == "boot" then
	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing new kernel + recovery combo");
	package_extract_file("boot.img", file_getprop("/tmp/aroma-data/device.prop", "kernel"));
endif;

### TWRP ###
if file_getprop("/tmp/aroma-data/archidroidrecovery.prop", "recovery") == "twrp" then
	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing TWRP recovery");
	package_extract_file("_archidroid/recoveries/twrp/recovery.img", file_getprop("/tmp/aroma-data/device.prop", "recovery"));
endif;

if file_getprop("/tmp/aroma-data/archidroidrecovery.prop", "recovery") == "none" then
	package_extract_dir("install", "/tmp/install");
	set_metadata_recursive("/tmp/install", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644);
	set_metadata_recursive("/tmp/install/bin", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0755);

	if file_getprop("/tmp/aroma-data/archidroidwipe.prop", "wipe") == "no" then
		package_extract_file("META-INF/org/cyanogenmod/releasekey", "/tmp/releasekey");
		run_program("/tmp/install/bin/otasigcheck.sh") != "31744" || abort("Can't install this package on top of incompatible data. A data wipe is required!");

		if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop", "preset") != "barebones" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Backing up all addons");
			run_program("/tmp/install/bin/backuptool.sh", "backup");
		endif;

		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Wiping dalvik cache and resource cache");
		delete_recursive("/data/dalvik-cache");
		delete_recursive("/data/resource-cache");
	else
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Wiping /data excluding /data/media");
		package_extract_file("_archidroid/exec/wipe.sh", "/tmp/wipe.sh");
		set_metadata("/tmp/wipe.sh", "uid", 0, "gid", 0, "mode", 0755);
		run_program("/tmp/wipe.sh");
		delete("/tmp/wipe.sh");
	endif;

	### ARCHIDROID TOOLS ###
	package_extract_file("_archidroid/exec/adlock.sh", "/tmp/adlock.sh");
	set_metadata("/tmp/adlock.sh", "uid", 0, "gid", 0, "mode", 0755);

	set_progress(0.03);

	### UNLOCK ###
#	run_program("/tmp/adlock.sh", "unlock", "/system/etc/hosts");

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Wiping system partition");
	delete_recursive("/system");

	set_progress(0.08);

	if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop", "preset") != "barebones" then
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Executing pre-install ArchiDroid scripts");
		package_extract_file("_archidroid/exec/archidroid_backend_pre.sh", "/tmp/archidroid_backend_pre.sh");
		set_metadata("/tmp/archidroid_backend_pre.sh", "uid", 0, "gid", 0, "mode", 0755);
		if file_getprop("/tmp/aroma-data/archidroidwipe.prop", "wipe") == "yes" then
			ui_print("<b><#ff0000>RunOnce</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>$</#></b> Install mode detected");
			run_program("/tmp/archidroid_backend_pre.sh", "INSTALL");
		else
			ui_print("<b><#ff0000>RunOnce</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>$</#></b> Update mode detected");
			run_program("/tmp/archidroid_backend_pre.sh", "UPDATE");
		endif;
		delete("/tmp/archidroid_backend_pre.sh");
	endif;

	set_progress(0.1);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing ArchiDroid base");
	show_progress(0.4, 1500);
	package_extract_dir("system", "/system");
	set_progress(0.51);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Creating symlinks");
	symlink("../xbin/su", "/system/bin/su");
	symlink("/system/lib/libbluetooth_jni.so", "/system/app/Bluetooth/lib/arm/libbluetooth_jni.so");
	symlink("/system/lib/libdefcontainer_jni.so", "/system/priv-app/DefaultContainerService/lib/arm/libdefcontainer_jni.so");
	symlink("/system/lib/libjni_eglfence.so", "/system/app/Gallery2/lib/arm/libjni_eglfence.so");
	symlink("/system/lib/libjni_filtershow_filters.so", "/system/app/Gallery2/lib/arm/libjni_filtershow_filters.so");
	symlink("/system/lib/libjni_jpegstream.so", "/system/app/Gallery2/lib/arm/libjni_jpegstream.so");
	symlink("/system/lib/libjni_jpegutil.so", "/system/app/Camera2/lib/arm/libjni_jpegutil.so");
	symlink("/system/lib/libjni_latinime.so", "/system/app/LatinIME/lib/arm/libjni_latinime.so");
	symlink("/system/lib/libjni_pacprocessor.so", "/system/app/PacProcessor/lib/arm/libjni_pacprocessor.so");
	symlink("/system/lib/libjni_terminal.so", "/system/app/Terminal/lib/arm/libjni_terminal.so");
	symlink("/system/lib/libjni_tinyplanet.so", "/system/app/Camera2/lib/arm/libjni_tinyplanet.so");
	symlink("/system/lib/libnfc_jni.so", "/system/app/Nfc/lib/arm/libnfc_jni.so");
	symlink("/system/lib/libprintspooler_jni.so", "/system/app/PrintSpooler/lib/arm/libprintspooler_jni.so");
	symlink("/system/lib/librsjni.so", "/system/app/Gallery2/lib/arm/librsjni.so");
	symlink("/system/lib/libttscompat.so", "/system/app/PicoTts/lib/arm/libttscompat.so");
	symlink("/system/lib/libttspico.so", "/system/app/PicoTts/lib/arm/libttspico.so");
	symlink("/system/lib/libwebviewchromium.so", "/system/app/webview/lib/arm/libwebviewchromium.so");
	symlink("Roboto-Bold.ttf", "/system/fonts/DroidSans-Bold.ttf");
	symlink("Roboto-Regular.ttf", "/system/fonts/DroidSans.ttf");
	symlink("app_process32", "/system/bin/app_process");
	symlink("busybox", "/system/xbin/[", "/system/xbin/[[",
			"/system/xbin/adjtimex", "/system/xbin/arp", "/system/xbin/ash",
			"/system/xbin/awk", "/system/xbin/base64", "/system/xbin/basename",
			"/system/xbin/bbconfig", "/system/xbin/blkid", "/system/xbin/blockdev",
			"/system/xbin/brctl", "/system/xbin/bunzip2", "/system/xbin/bzcat",
			"/system/xbin/bzip2", "/system/xbin/cal", "/system/xbin/cat",
			"/system/xbin/catv", "/system/xbin/chattr", "/system/xbin/chcon",
			"/system/xbin/chgrp", "/system/xbin/chmod", "/system/xbin/chown",
			"/system/xbin/chroot", "/system/xbin/chvt", "/system/xbin/clear",
			"/system/xbin/cmp", "/system/xbin/comm", "/system/xbin/cp",
			"/system/xbin/cpio", "/system/xbin/crond", "/system/xbin/crontab",
			"/system/xbin/cut", "/system/xbin/date", "/system/xbin/dc",
			"/system/xbin/dd", "/system/xbin/deallocvt", "/system/xbin/depmod",
			"/system/xbin/devmem", "/system/xbin/df", "/system/xbin/diff",
			"/system/xbin/dirname", "/system/xbin/dmesg", "/system/xbin/dnsd",
			"/system/xbin/dos2unix", "/system/xbin/du", "/system/xbin/echo",
			"/system/xbin/ed", "/system/xbin/egrep", "/system/xbin/env",
			"/system/xbin/expand", "/system/xbin/expr", "/system/xbin/false",
			"/system/xbin/fbsplash", "/system/xbin/fdisk", "/system/xbin/fgconsole",
			"/system/xbin/fgrep", "/system/xbin/find", "/system/xbin/findfs",
			"/system/xbin/flash_lock", "/system/xbin/flash_unlock",
			"/system/xbin/flashcp", "/system/xbin/flock", "/system/xbin/fold",
			"/system/xbin/free", "/system/xbin/freeramdisk", "/system/xbin/fstrim",
			"/system/xbin/fsync", "/system/xbin/ftpget", "/system/xbin/ftpput",
			"/system/xbin/fuser", "/system/xbin/getenforce", "/system/xbin/getopt",
			"/system/xbin/getsebool", "/system/xbin/grep", "/system/xbin/groups",
			"/system/xbin/gunzip", "/system/xbin/gzip", "/system/xbin/halt",
			"/system/xbin/head", "/system/xbin/hexdump", "/system/xbin/hwclock",
			"/system/xbin/id", "/system/xbin/ifconfig", "/system/xbin/inetd",
			"/system/xbin/insmod", "/system/xbin/install", "/system/xbin/ionice",
			"/system/xbin/iostat", "/system/xbin/ip", "/system/xbin/kill",
			"/system/xbin/killall", "/system/xbin/killall5", "/system/xbin/less",
			"/system/xbin/ln", "/system/xbin/losetup", "/system/xbin/ls",
			"/system/xbin/lsattr", "/system/xbin/lsmod", "/system/xbin/lspci",
			"/system/xbin/lsusb", "/system/xbin/lzcat", "/system/xbin/lzma",
			"/system/xbin/lzop", "/system/xbin/lzopcat", "/system/xbin/man",
			"/system/xbin/matchpathcon", "/system/xbin/md5sum", "/system/xbin/mesg",
			"/system/xbin/mkdir", "/system/xbin/mke2fs", "/system/xbin/mkfifo",
			"/system/xbin/mkfs.ext2", "/system/xbin/mkfs.vfat",
			"/system/xbin/mknod", "/system/xbin/mkswap", "/system/xbin/mktemp",
			"/system/xbin/modinfo", "/system/xbin/modprobe", "/system/xbin/more",
			"/system/xbin/mount", "/system/xbin/mountpoint", "/system/xbin/mpstat",
			"/system/xbin/mv", "/system/xbin/nanddump", "/system/xbin/nandwrite",
			"/system/xbin/nbd-client", "/system/xbin/netstat", "/system/xbin/nice",
			"/system/xbin/nmeter", "/system/xbin/nohup", "/system/xbin/nslookup",
			"/system/xbin/ntpd", "/system/xbin/od", "/system/xbin/openvt",
			"/system/xbin/patch", "/system/xbin/pgrep", "/system/xbin/pidof",
			"/system/xbin/ping", "/system/xbin/pipe_progress", "/system/xbin/pkill",
			"/system/xbin/pmap", "/system/xbin/poweroff", "/system/xbin/printenv",
			"/system/xbin/printf", "/system/xbin/ps", "/system/xbin/pstree",
			"/system/xbin/pwd", "/system/xbin/pwdx", "/system/xbin/rdate",
			"/system/xbin/rdev", "/system/xbin/readlink", "/system/xbin/realpath",
			"/system/xbin/renice", "/system/xbin/reset", "/system/xbin/resize",
			"/system/xbin/restorecon", "/system/xbin/rev", "/system/xbin/rm",
			"/system/xbin/rmdir", "/system/xbin/rmmod", "/system/xbin/route",
			"/system/xbin/run-parts", "/system/xbin/runcon", "/system/xbin/rx",
			"/system/xbin/sed", "/system/xbin/selinuxenabled", "/system/xbin/seq",
			"/system/xbin/sestatus", "/system/xbin/setconsole",
			"/system/xbin/setenforce", "/system/xbin/setfiles",
			"/system/xbin/setkeycodes", "/system/xbin/setsebool",
			"/system/xbin/setserial", "/system/xbin/setsid", "/system/xbin/sh",
			"/system/xbin/sha1sum", "/system/xbin/sha256sum",
			"/system/xbin/sha3sum", "/system/xbin/sha512sum", "/system/xbin/sleep",
			"/system/xbin/smemcap", "/system/xbin/sort", "/system/xbin/split",
			"/system/xbin/stat", "/system/xbin/strings", "/system/xbin/stty",
			"/system/xbin/sum", "/system/xbin/swapoff", "/system/xbin/swapon",
			"/system/xbin/sync", "/system/xbin/sysctl", "/system/xbin/tac",
			"/system/xbin/tail", "/system/xbin/tar", "/system/xbin/taskset",
			"/system/xbin/tee", "/system/xbin/telnet", "/system/xbin/telnetd",
			"/system/xbin/test", "/system/xbin/tftp", "/system/xbin/tftpd",
			"/system/xbin/time", "/system/xbin/timeout", "/system/xbin/top",
			"/system/xbin/touch", "/system/xbin/tr", "/system/xbin/traceroute",
			"/system/xbin/true", "/system/xbin/ttysize", "/system/xbin/tune2fs",
			"/system/xbin/umount", "/system/xbin/uname", "/system/xbin/uncompress",
			"/system/xbin/unexpand", "/system/xbin/uniq", "/system/xbin/unix2dos",
			"/system/xbin/unlzma", "/system/xbin/unlzop", "/system/xbin/unxz",
			"/system/xbin/unzip", "/system/xbin/uptime", "/system/xbin/usleep",
			"/system/xbin/uudecode", "/system/xbin/uuencode", "/system/xbin/vi",
			"/system/xbin/watch", "/system/xbin/wc", "/system/xbin/wget",
			"/system/xbin/which", "/system/xbin/whoami", "/system/xbin/xargs",
			"/system/xbin/xz", "/system/xbin/xzcat", "/system/xbin/yes",
			"/system/xbin/zcat");
	symlink("dalvikvm32", "/system/bin/dalvikvm");
	symlink("libGLESv2.so", "/system/lib/libGLESv3.so");
	symlink("mount.exfat", "/system/bin/fsck.exfat",
			"/system/bin/mkfs.exfat");
	symlink("pigz", "/system/xbin/unpigz");
	symlink("toolbox", "/system/bin/cat", "/system/bin/chcon",
			"/system/bin/chmod", "/system/bin/chown", "/system/bin/clear",
			"/system/bin/cmp", "/system/bin/cp", "/system/bin/date",
			"/system/bin/dd", "/system/bin/df", "/system/bin/dmesg",
			"/system/bin/du", "/system/bin/getenforce", "/system/bin/getevent",
			"/system/bin/getprop", "/system/bin/getsebool", "/system/bin/grep",
			"/system/bin/hd", "/system/bin/id", "/system/bin/ifconfig",
			"/system/bin/iftop", "/system/bin/insmod", "/system/bin/ioctl",
			"/system/bin/ionice", "/system/bin/kill", "/system/bin/ln",
			"/system/bin/load_policy", "/system/bin/log", "/system/bin/ls",
			"/system/bin/lsmod", "/system/bin/lsof", "/system/bin/md5",
			"/system/bin/mkdir", "/system/bin/mknod", "/system/bin/mkswap",
			"/system/bin/mount", "/system/bin/mv", "/system/bin/nandread",
			"/system/bin/netstat", "/system/bin/newfs_msdos", "/system/bin/nohup",
			"/system/bin/notify", "/system/bin/printenv", "/system/bin/prlimit",
			"/system/bin/ps", "/system/bin/r", "/system/bin/readlink",
			"/system/bin/renice", "/system/bin/restart", "/system/bin/restorecon",
			"/system/bin/rm", "/system/bin/rmdir", "/system/bin/rmmod",
			"/system/bin/route", "/system/bin/runcon", "/system/bin/schedtop",
			"/system/bin/sendevent", "/system/bin/setenforce",
			"/system/bin/setfattr", "/system/bin/setprop", "/system/bin/setsebool",
			"/system/bin/sleep", "/system/bin/smd", "/system/bin/start",
			"/system/bin/stop", "/system/bin/swapoff", "/system/bin/swapon",
			"/system/bin/sync", "/system/bin/top", "/system/bin/touch",
			"/system/bin/umount", "/system/bin/uptime", "/system/bin/vmstat",
			"/system/bin/watchprops",
			"/system/bin/wipe");

	set_progress(0.52);

	if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop", "preset") != "barebones" then
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing ArchiDroid backend");
		package_extract_dir("_archidroid/auto", "/");
	endif;

	set_progress(0.53);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Setting permissions");
	set_metadata_recursive("/system", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/bin", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/bin/app_process32", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:zygote_exec:s0");
	set_metadata("/system/bin/auditd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:logd_exec:s0");
	set_metadata("/system/bin/bootanimation", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:bootanim_exec:s0");
	set_metadata("/system/bin/clatd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:clatd_exec:s0");
	set_metadata("/system/bin/debuggerd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:debuggerd_exec:s0");
	set_metadata("/system/bin/dex2oat", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dex2oat_exec:s0");
	set_metadata("/system/bin/dhcpcd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dhcp_exec:s0");
	set_metadata("/system/bin/dnsmasq", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dnsmasq_exec:s0");
	set_metadata("/system/bin/drmserver", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:drmserver_exec:s0");
	set_metadata("/system/bin/dumpstate", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dumpstate_exec:s0");
	set_metadata("/system/bin/gpsd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:gpsd_exec:s0");
	set_metadata("/system/bin/hostapd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:hostapd_exec:s0");
	set_metadata("/system/bin/install-recovery.sh", "uid", 0, "gid", 0, "mode", 0750, "capabilities", 0x0, "selabel", "u:object_r:install_recovery_exec:s0");
	set_metadata("/system/bin/installd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:installd_exec:s0");
	set_metadata("/system/bin/keystore", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:keystore_exec:s0");
	set_metadata("/system/bin/lmkd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:lmkd_exec:s0");
	set_metadata("/system/bin/logd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:logd_exec:s0");
	set_metadata("/system/bin/mdnsd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:mdnsd_exec:s0");
	set_metadata("/system/bin/mediaserver", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:mediaserver_exec:s0");
	set_metadata("/system/bin/mtpd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:mtp_exec:s0");
	set_metadata("/system/bin/netcfg", "uid", 0, "gid", 3003, "mode", 02750, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/bin/netd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:netd_exec:s0");
	set_metadata("/system/bin/patchoat", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dex2oat_exec:s0");
	set_metadata("/system/bin/ping", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/bin/pppd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:ppp_exec:s0");
	set_metadata("/system/bin/racoon", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:racoon_exec:s0");
	set_metadata("/system/bin/rild", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:rild_exec:s0");
	set_metadata("/system/bin/run-as", "uid", 0, "gid", 2000, "mode", 0750, "capabilities", 0xc0, "selabel", "u:object_r:runas_exec:s0");
	set_metadata("/system/bin/sdcard", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:sdcardd_exec:s0");
	set_metadata("/system/bin/servicemanager", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:servicemanager_exec:s0");
	set_metadata("/system/bin/sh", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:shell_exec:s0");
	set_metadata("/system/bin/surfaceflinger", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:surfaceflinger_exec:s0");
	set_metadata("/system/bin/sysinit", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:sysinit_exec:s0");
	set_metadata("/system/bin/uncrypt", "uid", 0, "gid", 0, "mode", 0750, "capabilities", 0x0, "selabel", "u:object_r:uncrypt_exec:s0");
	set_metadata("/system/bin/vdc", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:vdc_exec:s0");
	set_metadata("/system/bin/vold", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:vold_exec:s0");
	set_metadata("/system/bin/wpa_supplicant", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:wpa_exec:s0");
	set_metadata("/system/etc", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/bash", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/bluetooth", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/dhcpcd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/dhcpcd/dhcpcd-hooks", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/dhcpcd/dhcpcd-run-hooks", "uid", 1014, "gid", 2000, "mode", 0550, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/init.d", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/init.d/90userinit", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:userinit_exec:s0");
	set_metadata("/system/etc/nano", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/permissions", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/ppp", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0555, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/security", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/security/cacerts", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/sound", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/ssh", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/ssh/sshd_config", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/E", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/terminfo/a", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/a/ansi", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/c", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/terminfo/d", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/d/dumb", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/terminfo/h", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/h/hurd", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/terminfo/l", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/l/linux", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/m", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/terminfo/p", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/p/pcansi", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/r", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/s", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/v", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/w", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/terminfo/x", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/updatecmds", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/updatecmds/migrate_nfc.txt", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/etc/wifi", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/recovery-from-boot.p", "uid", 0, "gid", 0, "mode", 0644);
	set_metadata_recursive("/system/vendor", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:firmware_exynos:s0");
	set_metadata("/system/vendor", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/firmware", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:firmware_exynos:s0");
	set_metadata("/system/vendor/firmware/bluetooth", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:firmware_exynos:s0");
	set_metadata("/system/vendor/firmware/mfc_fw.bin", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:firmware_mfc:s0");
	set_metadata_recursive("/system/vendor/lib", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/lib", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/lib/drm", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/lib/drm/libdrmwvmplugin.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/vendor/lib/mediadrm", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/xbin", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/librank", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/procmem", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/procrank", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata("/system/xbin/su", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:su_exec:s0");

	if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop", "preset") != "barebones" then
		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Executing post-install ArchiDroid scripts");
		package_extract_file("_archidroid/exec/archidroid_backend_post.sh", "/tmp/archidroid_backend_post.sh");
		set_metadata("/tmp/archidroid_backend_post.sh", "uid", 0, "gid", 0, "mode", 0755);
		run_program("/tmp/archidroid_backend_post.sh");
		delete("/tmp/archidroid_backend_post.sh");
	endif;

	set_progress(0.54);

	ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Cleaning old kernel");
	package_extract_file("boot.img", file_getprop("/tmp/aroma-data/device.prop", "kernel"));

	#################
	### BAREBONES ###
	#################
	if file_getprop("/tmp/aroma-data/archidroidinstallmode.prop", "preset") == "barebones" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing Stock kernel");
			# We have stock kernel already
	else
		##############
		### KERNEL ###
		##############

		### ARCHI ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "kernel") == "archi" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing ArchiKernel");
			delete_recursive("/tmp/archikernel");
			package_extract_dir("_archidroid/kernels/archi/core", "/tmp/archikernel");
			set_metadata("/tmp/archikernel/init.sh", "uid", 0, "gid", 0, "mode", 0755);
			set_metadata("/tmp/archikernel/fixPreLollipop.sh", "uid", 0, "gid", 0, "mode", 0755);
			package_extract_file("_archidroid/kernels/archi/prebuilt/zImage", "/tmp/archikernel/zImage");
			delete_recursive("/system/lib/modules");
			package_extract_dir("_archidroid/kernels/archi/prebuilt/system", "/system");
			package_extract_dir("_archidroid/kernels/archi/overlay", "/");
			if run_program("/tmp/archikernel/fixPreLollipop.sh") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiKernel</#><#ecec36>:~</#><#c00cdf>#</#></b> Detected pre-Lollipop ROM. Perhaps it's time for update! :)");
			else
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiKernel</#><#ecec36>:~</#><#c00cdf>#</#></b> Detected Lollipop+ ROM");
			endif;
			if run_program("/tmp/archikernel/init.sh") == "0" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiKernel</#><#ecec36>:~</#><#c00cdf>#</#></b> Status: SUCCESS");
			else
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiKernel</#><#ecec36>:~</#><#c00cdf>#</#></b> Status: FAILED");
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiKernel</#><#ecec36>:~</#><#c00cdf>#</#></b> ErrorLog: /data/media/0/ArchiKernelError.log");
				run_program("/sbin/cp", "/tmp/archikernel/ArchiKernel.log", "/data/media/0/ArchiKernelError.log");
			endif;
			delete_recursive("/tmp/archikernel");
		endif;

		### BOEFFLA ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "kernel") == "boeffla" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing Boeffla kernel");
			package_extract_file("_archidroid/kernels/boeffla/boot.img", file_getprop("/tmp/aroma-data/device.prop", "kernel"));
			delete_recursive("/system/lib/modules");
			package_extract_dir("_archidroid/kernels/boeffla/system", "/system");
			package_extract_dir("_archidroid/kernels/boeffla/overlay", "/");
		endif;

		### STOCK ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "kernel") == "stock" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Flashing Stock kernel");
			# We have stock kernel already
		endif;

		set_progress(0.6);


		###############
		### RESTORE ###
		###############

		if file_getprop("/tmp/aroma-data/archidroidwipe.prop", "wipe") == "no" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Restoring addons");
			run_program("/tmp/install/bin/backuptool.sh", "restore");
		endif;

		set_progress(0.63);


		############
		### ROOT ###
		############

		### CHAINFIRE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "superuser") == "chainfire" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing SuperSU by Chainfire");
			package_extract_dir("_archidroid/root/chainfire/system", "/system");
			symlink("/system/etc/install-recovery.sh", "/system/bin/install-recovery.sh");
			set_metadata("/system/etc/install-recovery.sh", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:toolbox_exec:s0");
			set_metadata("/system/etc/init.d/99SuperSUDaemon", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/xbin/su", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/xbin/supolicy", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");

			# SuperSU requires some additional work
			package_extract_file("_archidroid/root/chainfire/chainfire.sh", "/tmp/chainfire.sh");
			set_metadata("/tmp/chainfire.sh", "uid", 0, "gid", 0, "mode", 0755);
			run_program("/tmp/chainfire.sh");
			delete("/tmp/chainfire.sh");

			# Apply permissions
			set_metadata("/system/xbin/sugote", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:zygote_exec:s0");
			set_metadata("/system/xbin/sugote-mksh", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/bin/.ext", "uid", 0, "gid", 0, "mode", 0777, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			run_program("/system/xbin/su", "--install");
		endif;

		### KOUSH ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "superuser") == "koush" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Superuser by Koush");
			# This is default already
		endif;

		### NONE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "superuser") == "none" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Disabling root access");
			package_extract_file("_archidroid/root/none/disableroot.sh", "/tmp/disableroot.sh");
			set_metadata("/tmp/disableroot.sh", "uid", 0, "gid", 0, "mode", 0755);
			run_program("/tmp/disableroot.sh");
			delete("/tmp/disableroot.sh");
		endif;


		###############
		### DENSITY ###
		###############

		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ", file_getprop("/tmp/aroma-data/archidroid.prop", "density"), " density");

		if file_getprop("/tmp/aroma-data/archidroid.prop", "density") != "default" then
			package_extract_file("_archidroid/exec/density.sh", "/tmp/density.sh");
			set_metadata("/tmp/density.sh", "uid", 0, "gid", 0, "mode", 0755);
			run_program("/tmp/density.sh", file_getprop("/tmp/aroma-data/archidroid.prop", "density"));
			delete("/tmp/density.sh");
		endif;

		set_progress(0.64);


		#############
		### GAPPS ###
		#############

		if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps") == "1" || file_getprop("/tmp/aroma-data/archidroid.prop", "keyboard") == "google" || file_getprop("/tmp/aroma-data/archidroid.prop", "launcher") == "google" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Apps");
			show_progress(0.15, 70);
			package_extract_dir("_archidroid/gapps/base", "/system");

			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-calendar") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Calendar");
				delete_recursive("/system/app/Calendar");
				package_extract_dir("_archidroid/gapps/extra/calendargoogle", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-camera") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Camera");
				delete_recursive("/system/app/Camera2");
				package_extract_dir("_archidroid/gapps/extra/cameragoogle", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-chrome") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Chrome");
				delete_recursive("/system/app/Browser");
				package_extract_dir("_archidroid/gapps/extra/chrome", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-exchange") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Exchange Services");
				delete_recursive("/system/app/Exchange2");
				package_extract_dir("_archidroid/gapps/extra/exchangegoogle", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-face") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Face");
				package_extract_dir("_archidroid/gapps/extra/facedetect", "/system");
				package_extract_dir("_archidroid/gapps/extra/faceunlock", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-gmail") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Gmail");
				delete_recursive("/system/app/Email");
				package_extract_dir("_archidroid/gapps/extra/gmail", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-messenger") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Messenger");
				delete_recursive("/system/priv-app/Mms");
				package_extract_dir("_archidroid/gapps/extra/messenger", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-music") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Music");
				delete_recursive("/system/app/Eleven");
				package_extract_dir("_archidroid/gapps/extra/music", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-search") == "1" || file_getprop("/tmp/aroma-data/archidroid.prop", "launcher") == "google" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Search");
				delete_recursive("/system/app/QuickSearchBox");
				package_extract_dir("_archidroid/gapps/extra/search", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-speech") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Speech");
				package_extract_dir("_archidroid/gapps/extra/speech", "/system");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "gapps-tts") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Text-To-Speech");
				delete_recursive("/system/app/PicoTts");
				package_extract_dir("_archidroid/gapps/extra/googletts", "/system");
			endif;
		endif;

		set_progress(0.80);


		##############
		### XPOSED ###
		##############

		if file_getprop("/tmp/aroma-data/archidroid.prop", "xposed") == "1" then

			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Xposed framework");

			# Xposed requires some additional work
			package_extract_file("_archidroid/apps/xposed/xposed.sh", "/tmp/xposed.sh");
			set_metadata("/tmp/xposed.sh", "uid", 0, "gid", 0, "mode", 0755);
			run_program("/tmp/xposed.sh");
			delete("/tmp/xposed.sh");

			# EXTRACT
			package_extract_dir("_archidroid/apps/xposed/xposed", "/");

			# PERMISSIONS
			set_metadata("/system/xposed.prop", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata_recursive("/system/app/Xposed", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/bin/app_process32_xposed", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:zygote_exec:s0");
			set_metadata("/system/bin/dex2oat", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dex2oat_exec:s0");
			set_metadata("/system/bin/oatdump", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/bin/patchoat", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dex2oat_exec:s0");
			set_metadata("/system/framework/XposedBridge.jar", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/lib/libart.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/lib/libart-compiler.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/lib/libart-disassembler.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/lib/libsigchain.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
			set_metadata("/system/lib/libxposed_art.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");

			# Optional modules
			if file_getprop("/tmp/aroma-data/archidroid.prop", "xposed-appsettings") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including App Settings module");
				package_extract_dir("_archidroid/apps/xposed/appsettings", "/");
				set_metadata_recursive("/system/app/AppSettings", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "xposed-gravitybox") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including GravityBox module");
				package_extract_dir("_archidroid/apps/xposed/gravitybox", "/");
				set_metadata_recursive("/system/app/GravityBox", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
			endif;
			if file_getprop("/tmp/aroma-data/archidroid.prop", "xposed-xprivacy") == "1" then
				ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Including XPrivacy module");
				package_extract_dir("_archidroid/apps/xposed/xprivacy", "/");
				set_metadata_recursive("/system/app/XPrivacy", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", "0x0", "selabel", "u:object_r:system_file:s0");
			endif;

		endif;

		set_progress(0.82);


		################
		### KEYBOARD ###
		################

		### GOOGLE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "keyboard") == "google" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Keyboard");
			package_extract_dir("_archidroid/gapps/extra/keyboardgoogle", "/system");
		endif;

		### STOCK ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "keyboard") == "stock" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Stock Keyboard");
		else
			delete_recursive("/system/app/LatinIME");
		endif;

		set_progress(0.84);


		################
		### LAUNCHER ###
		################

		### GOOGLE ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "launcher") == "google" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Google Launcher");
			package_extract_dir("_archidroid/gapps/extra/googlenow", "/system");
		endif;

		### NOVA ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "launcher") == "nova" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Nova Launcher");
			package_extract_dir("_archidroid/apps/nova", "/");
		endif;

		### STOCK ###
		if file_getprop("/tmp/aroma-data/archidroid.prop", "launcher") == "stock" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Stock Launcher");
		else
			delete_recursive("/system/priv-app/Trebuchet");
		endif;

		set_progress(0.85);


		##############
		### TWEAKS ###
		##############

		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Executing post-install ArchiDroid tweaks");
		package_extract_file("_archidroid/tweaks/build.prop/append.sh", "/tmp/append.sh");
		set_metadata("/tmp/append.sh", "uid", 0, "gid", 0, "mode", 0755);
		run_program("/tmp/append.sh");
		delete("/tmp/append.sh");

		ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Profiling BCM for: ", file_getprop("/tmp/aroma-data/archidroid.prop", "bcm4334"));
		package_extract_file("_archidroid/exec/bcm4334.sh", "/tmp/bcm4334.sh");
		set_metadata("/tmp/bcm4334.sh", "uid", 0, "gid", 0, "mode", 0755);
		run_program("/tmp/bcm4334.sh", file_getprop("/tmp/aroma-data/archidroid.prop", "bcm4334"));
		delete("/tmp/bcm4334.sh");

		if file_getprop("/tmp/aroma-data/archidroid.prop", "navibar") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Navigation Bar enabled");
			package_extract_file("_archidroid/tweaks/build.prop/navibarON.sh", "/tmp/navibarON.sh");
			set_metadata("/tmp/navibarON.sh", "uid", 0, "gid", 0, "mode", 0755);
			run_program("/tmp/navibarON.sh", file_getprop("/tmp/aroma-data/archidroid.prop", "navibar-hwenabled"));
			delete("/tmp/navibarON.sh");
		else
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Navigation Bar disabled");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "cell") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Cell Broadcasts enabled");
		else
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Cell Broadcasts disabled");
			delete_recursive("/system/priv-app/CellBroadcastReceiver");
		endif;

		set_progress(0.86);


		#####################
		### BOOTANIMATION ###
		#####################

		if file_getprop("/tmp/aroma-data/archidroid.prop", "bootanimation") == "archi3m" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid 3.X Material bootanimation");
			package_extract_dir("_archidroid/bootanimations/archi3m", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "bootanimation") == "archi3" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid 3.X bootanimation");
			package_extract_dir("_archidroid/bootanimations/archi3", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "bootanimation") == "archi2" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid 2.X bootanimation");
			package_extract_dir("_archidroid/bootanimations/archi2", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "bootanimation") == "archi1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying ArchiDroid 1.X bootanimation");
			package_extract_dir("_archidroid/bootanimations/archi1", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "bootanimation") == "stock" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying Stock bootanimation");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "bootanimation") == "liveboot" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Applying Live Boot bootanimation");
			package_extract_dir("_archidroid/bootanimations/liveboot", "/");
			set_metadata("/system/etc/init.d/00liveboot", "uid", 0, "gid", 0, "mode", 0755);
			package_extract_file("_archidroid/tweaks/build.prop/bootaniOFF.sh", "/tmp/bootaniOFF.sh");
			set_metadata("/tmp/bootaniOFF.sh", "uid", 0, "gid", 0, "mode", 0755);
			run_program("/tmp/bootaniOFF.sh");
			delete("/tmp/bootaniOFF.sh", "/system/media/bootanimation.zip");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "bootanimation") == "none" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Disabling bootanimation");
			package_extract_file("_archidroid/tweaks/build.prop/bootaniOFF.sh", "/tmp/bootaniOFF.sh");
			set_metadata("/tmp/bootaniOFF.sh", "uid", 0, "gid", 0, "mode", 0755);
			run_program("/tmp/bootaniOFF.sh");
			delete("/tmp/bootaniOFF.sh", "/system/media/bootanimation.zip");
		endif;

		set_progress(0.87);


		############
		### APPS ###
		############

		if file_getprop("/tmp/aroma-data/archidroid.prop", "cooltool") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing CoolTool");
			package_extract_dir("_archidroid/apps/cooltool", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "fdroid") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing F-Droid");
			package_extract_dir("_archidroid/apps/fdroid", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "greenify") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Greenify");
			package_extract_dir("_archidroid/apps/greenify", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "lmt") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing LMT");
			package_extract_dir("_archidroid/apps/lmt", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "spiritfm") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Spirit FM");
			package_extract_dir("_archidroid/apps/spiritfm", "/");
		endif;

		if file_getprop("/tmp/aroma-data/archidroid.prop", "titaniumbackup") == "1" then
			ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Installing Titanium Backup");
			package_extract_dir("_archidroid/apps/titaniumbackup", "/");
		endif;


		set_progress(0.90);

		### LOCK ###
#		run_program("/tmp/adlock.sh", "lock", "/system/etc/hosts");
		delete("/tmp/adlock.sh");
	endif;
	set_progress(0.98);
endif;

ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Syncing system");
run_program("/sbin/sync");

set_progress(0.99);

ui_print("<b><#ff0000>root</#><#ecec36>@</#><#0cdfdf>ArchiDroid</#><#ecec36>:~</#><#c00cdf>#</#></b> Done!");

ui_print("===================================");
ui_print("  ArchiDroid flashed successfully  ");
ui_print("===================================");
set_progress(1.0);
