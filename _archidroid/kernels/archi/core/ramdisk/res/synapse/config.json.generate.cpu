#!/system/bin/sh

#     _             _     _ _  __                    _
#    / \   _ __ ___| |__ (_) |/ /___ _ __ _ __   ___| |
#   / _ \ | '__/ __| '_ \| | ' // _ \ '__| '_ \ / _ \ |
#  / ___ \| | | (__| | | | | . \  __/ |  | | | |  __/ |
# /_/   \_\_|  \___|_| |_|_|_|\_\___|_|  |_| |_|\___|_|
#
# Copyright 2015 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cat << EOF
{
	name:CPU,
	elements:[
		$(
			if [[ -e /sys/devices/platform/s5p-tmu/temperature ]]; then
cat << _EOF
				{
					SLiveLabel:{
						title:"CPU temperature",
						description:"Data read from CPU temperature sensor",
						refresh:500,
						action:"echo \$(cat /sys/devices/platform/s5p-tmu/temperature) °C"
					}
				},
_EOF
			fi
		)
		$(
			if [[ -e /sys/devices/system/cpu/cpu0/cpufreq/asv_level ]]; then
			ASV_LEVEL="$(cat /sys/devices/system/cpu/cpu0/cpufreq/asv_level)"
cat << _EOF
				{
					SLiveLabel:{
						title:"ASV level",
						description:"ASV level is a measurement of your chip quality. Level 0 is the worst, while level 11 is the best. Better quality of the chip potentially improves OC/UV stability, giving you both faster and more battery-friendly values",
						refresh:0,
						action:"cat /sys/devices/system/cpu/cpu0/cpufreq/asv_level"
					}
				},
_EOF
			fi
		)
		{
			STitleBar:{
			title:"CPU frequency scaling"
			}
		},
		{
			SLiveLabel:{
				title:"CPU frequency",
				description:"Current CPU frequency",
				refresh:250,
				action:"for CORE in 0 1 2 3 4 5 6 7; do if [[ -e /sys/devices/system/cpu/cpu\${CORE} ]]; then if [[ -e /sys/devices/system/cpu/cpu\${CORE}/cpufreq/cpuinfo_cur_freq ]]; then echo CPU\${CORE}: \$((\$(cat /sys/devices/system/cpu/cpu\${CORE}/cpufreq/cpuinfo_cur_freq) / 1000)) MHz@n; else echo CPU\${CORE}: Offline@n; fi; else break; fi; done"
			}
		},
		{
			SSeekBar:{
				title:"CPU max frequency",
				description:"Set the maximum freqency the CPU scales up to",
				default:$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq),
				action:"AK_generic /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq",
				values:{
					$(
						while read FREQ TIME; do
							echo "$FREQ:"$((FREQ / 1000)) MHz", "
						done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
					)
				}
			}
		},
		{
			SSeekBar:{
				title:"CPU min frequency",
				description:"Set the minimum freqency the CPU scales down to",
				default:$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq),
				action:"AK_generic /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq",
				values:{
					$(
						while read FREQ TIME; do
							echo "$FREQ:"$((FREQ / 1000)) MHz", "
						done < /sys/devices/system/cpu/cpu0/cpufreq/stats/time_in_state
					)
				}
			}
		},
		{
			STitleBar:{
			title:"CPU undervolting"
			}
		},
		$(
			if [[ -e /sys/devices/system/cpu/cpu0/cpufreq/UV_uV_table ]]; then
				cat /sys/devices/system/cpu/cpu0/cpufreq/UV_uV_table | sed -e 's/mhz://g;s/uV//g' | while read UV_TABLE; do
					FREQ="$(echo "$UV_TABLE" | awk '{print $1}')"
					VALUE="$(echo "$UV_TABLE" | awk '{print $2}')"
cat << _EOF
					{
						SSeekBar:{
							title:"$FREQ MHz step",
							description:"asdasd",
							max:1500000, min:600000, unit:" uV", step:12500,
							default:$VALUE,
							action:"AK_UV /sys/devices/system/cpu/cpu0/cpufreq/UV_uV_table $FREQ"
						}
					},
_EOF
				done
			fi
		)
	]
}
EOF
