#!/system/bin/sh

#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ADMOUNTED() {
	return "$(mount | grep -qi "$1"; echo $?)"
}

ADTWEAK() {
	# $1 - what we're changing
	# $2 - to what we're changing
	local CURRENT="$(cat "$1")"
	if [[ "$CURRENT" = "$2" ]]; then
		echo "ADTWEAK: Value of $1 is already set to $CURRENT"
	else
		echo "$2" > "$1"
		echo "ADTWEAK: Tweaked $1 value from $CURRENT to $2"
	fi
}

ADSTOP() {
	case "$1" in
		"ALL")
			ADSTOP "HAVEGED"
			ADSTOP "FRANDOM"
			ADSTOP "ADBLOCK"
			ADSTOP "TMPFS"
			ADSTOP "LOGCAT"
		;;

		# Symlinks
		"HOSTS") ADSTOP "ADBLOCK" ;;
		"LOCALDNSES") ADSTOP "ADBLOCK" ;;
		"FORCELOCALDNSES") ADSTOP "ADBLOCK" ;;
		"PROXYDNSES") ADSTOP "ADBLOCK" ;;

		# Services
		"ADBLOCK")
			ADSTOP "DNS_MONITOR"
			ADSTOP "archidroid_dnsmasq"
			ADSTOP "archidroid_pixelserv"

			# If adblock is currently active, reset default DNS
			if [[ "$(getprop net.dns1)" = "127.0.0.1" ]]; then
				local IFPROBE="$(busybox route | grep "default" | head -n 1 | awk '{print $NF}')"
				local DNS1="$(getprop archidroid.adblock.dns1)"
				if [[ ! -z "$IFPROBE" ]]; then
					ndc resolver setifdns "$IFPROBE" "" "$DNS1"
				else
					# This should never happen
					for IF in $(getprop mobiledata.interfaces | tr ',' '\n'); do
						ndc resolver setifdns "$IF" "" "$DNS1"
					done
				fi
				ndc resolver flushdefaultif >/dev/null 2>&1 # Flush DNS Cache
			fi
		;;
		"DNS_MONITOR")
			rm -f "$ADTMPFS/ARCHIDROID_MONITOR_DNS"
		;;
		"FRANDOM")
			# Generic check if we're not doing something harmful
			if [[ -c /dev/urandom.orig && -c /dev/random.orig ]]; then
				rm -f /dev/urandom && mv /dev/urandom.orig /dev/urandom
				rm -f /dev/random && mv /dev/random.orig /dev/random
			fi
		;;
		"HAVEGED")
			ADSTOP "archidroid_haveged"
		;;
		"LOGCAT")
			kill $(pidof logcat) >/dev/null 2>&1
		;;
		"TMPFS")
			if ADMOUNTED "$ADTMPFS"; then
				umount "$ADTMPFS"
			fi
		;;
		archidroid_haveged)
			kill $(pidof archidroid_haveged) >/dev/null 2>&1
		;;
		archidroid_dnsmasq)
			kill $(pidof archidroid_dnsmasq) >/dev/null 2>&1
		;;
		archidroid_pixelserv)
			kill $(pidof archidroid_pixelserv) >/dev/null 2>&1
		;;
		*)
			kill $(pidof "$1") >/dev/null 2>&1
	esac
}

ADSTART() {
	case "$1" in
		"ALL")
			ADSTART "LOGCAT"
			ADSTART "TMPFS"
			ADSTART "HAVEGED"
			ADSTART "FRANDOM"
			ADSTART "ADBLOCK"
		;;

		# Symlinks
		"HOSTS") ADSTART "ADBLOCK" ;;
		"LOCALDNSES") ADSTART "ADBLOCK" ;;
		"FORCELOCALDNSES") ADSTART "ADBLOCK" ;;
		"PROXYDNSES") ADSTART "ADBLOCK" ;;

		# Services
		"ADBLOCK")
			if [[ "$ADBLOCK" -eq 1 ]]; then
				if [[ "$ADBLOCK_PROXYDNS" -eq 1 ]]; then
					if [[ "$(cmp /system/archidroid/dev/spinners/_Hosts/Default /system/etc/hosts >/dev/null 2>&1; echo $?)" -ne 0 ]]; then
						mount -o remount,rw /system

						if [[ "$HOSTSLOCKED" -eq 1 ]]; then
							chattr -i /system/etc/hosts
						fi

						cp -p /system/archidroid/dev/spinners/_Hosts/Default /system/etc/hosts

						if [[ "$HOSTSLOCKED" -eq 1 ]]; then
							chattr +i /system/etc/hosts
						fi

						mount -o remount,ro /system
					fi
					ADSTART "DNS_MONITOR"
					ADSTART "archidroid_dnsmasq"
				else
					if [[ "$(cmp /system/archidroid/etc/hosts /system/etc/hosts >/dev/null 2>&1; echo $?)" -ne 0  ]]; then
						mount -o remount,rw /system

						if [[ "$HOSTSLOCKED" -eq 1 ]]; then
							chattr -i /system/etc/hosts
						fi

						cp -p /system/archidroid/etc/hosts /system/etc/hosts

						if [[ "$HOSTSLOCKED" -eq 1 ]]; then
							chattr +i /system/etc/hosts
						fi

						mount -o remount,ro /system
					fi
				fi
				ADSTART "archidroid_pixelserv"
			fi
		;;
		"DNS_MONITOR")
			if [[ "$ADBLOCK" -eq 1 && "$ADBLOCK_PROXYDNS" -eq 1 ]]; then
				local EXTRA="--dnsproxy"
				if [[ "$ADBLOCKLOCALDNSES" -eq 1 ]]; then
					EXTRA+=" --resolv"
				fi
				ARCHIDROID_MONITOR_DNS $EXTRA &
			fi
		;;
		"FRANDOM")
			if [[ "$FRANDOM" -eq 1 ]]; then
				echo "INFO: Activating frandom!"
				if [[ ! -c /dev/frandom ]]; then
					echo "FRANDOM: frandom device not found, searching for frandom.ko kernel module..."
					for FRANDOMPATH in "/system/lib/modules" "/system/modules" "/lib/modules" "/modules"; do
						if [[ -f "$FRANDOMPATH/frandom.ko" ]]; then
							echo "FRANDOM: Loading frandom using $FRANDOMPATH/frandom.ko!"
							insmod "$FRANDOMPATH/frandom.ko"
							sleep 1
							break
						fi
					done
				fi
				if [[ -c /dev/frandom ]]; then
					echo "FRANDOM: frandom device found, activating erandom!"
					if [[ ! -c /dev/urandom.orig && ! -c /dev/random.orig ]]; then
						mv /dev/urandom /dev/urandom.orig &&
						ln /dev/erandom /dev/urandom &&
						chmod 666 /dev/urandom

						mv /dev/random /dev/random.orig &&
						ln /dev/frandom /dev/random &&
						chmod 666 /dev/random
						echo "FRANDOM: Activated!"
					else
						echo "FRANDOM: It looks like frandom has been already loaded"
					fi
				else
					echo "FRANDOM: frandom device not found after loading, it looks like it's not provided by your kernel or failed to load!"
				fi
			else
				echo "INFO: Frandom has been disabled"
			fi
		;;
		"HAVEGED")
			ADSTART "archidroid_haveged"
		;;
		"LOGCAT")
			if [[ "$LOGCAT" -eq 1 ]]; then
				logcat -f "$AD/logcat.txt" &
			fi
		;;
		"TMPFS")
			if ! ADMOUNTED "$ADTMPFS"; then
				mkdir -p "$ADTMPFS"
				mount -t tmpfs tmpfs "$ADTMPFS"
			fi
		;;
		"archidroid_dnsmasq")
			if [[ "$ADBLOCK" -eq 1 && "$ADBLOCK_PROXYDNS" -eq 1 ]]; then
				if [[ ! -f "$ADTMPFS/resolv.conf" ]]; then
					cp -p /system/etc/resolv.conf "$ADTMPFS/resolv.conf"
				fi
				local EXTRA="--all-servers -x $ADTMPFS/DNSMASQ.PID"
				if [[ "$ADBLOCKLOCALDNSES" -eq 1 ]]; then
					echo "ADBLOCK: Including local DNSes!"
					if [[ "$ADBLOCKSTRICTORDER" -eq 1 ]]; then
						echo "ADBLOCK: Strict order enabled!"
						EXTRA+=" --strict-order"
					fi
				else
					cp -p "/system/etc/resolv.conf" "$ADTMPFS/resolv.conf"
				fi
				echo "ADBLOCK: Activated archidroid_dnsmasq - local DNS server on 127.0.0.1:53, forwarding clean non-blocked traffic to specified DNS servers"
				archidroid_dnsmasq $EXTRA -C /system/archidroid/etc/dnsmasq.conf # Yes, we must break on spaces in this case
			fi
		;;
		"archidroid_pixelserv")
			if [[ "$ADBLOCK" -eq 1 ]]; then
				echo "ADBLOCK: Activated archidroid_pixelserv - local web server on 127.0.0.1:80, responding with NULLGIF"
				archidroid_pixelserv 127.0.0.1 >/dev/null 2>&1 &
			fi
		;;
		"archidroid_haveged")
			if [[ "$HAVEGED" -eq 1 ]]; then
				echo "INFO: Activating haveged!"
				local ENTROPY="1024" # Default: 128, Linux: 896, Max: 4096 - We want to make it high enough, but with considering battery life as well
				ADTWEAK "/proc/sys/vm/dirty_expire_centisecs" "1000"
				ADTWEAK "/proc/sys/vm/dirty_writeback_centisecs" "500"

				if [[ -c /dev/random.orig ]]; then
					mv /dev/random /dev/random.TEMP &&
					mv /dev/random.orig /dev/random &&
					archidroid_haveged -p "$ADTMPFS/HAVEGED.PID" -w "$ENTROPY" >/dev/null 2>&1 &&
					sleep 2 && # Let's give haveged some time to initialize
					mv /dev/random /dev/random.orig &&
					mv /dev/random.TEMP /dev/random
				else
					archidroid_haveged -p "$ADTMPFS/HAVEGED.PID" -w "$ENTROPY" >/dev/null 2>&1 &&
					sleep 2 # Let's give haveged some time to initialize
				fi

				echo "INFO: Activated archidroid_haveged - HArdware Volatile Entropy Gathering and Expansion Daemon, regenerating kernel's entropy pool"
				echo "HAVEGED: Entropy levels: Android default: 128, Linux: 896, Max: 4096"
				echo "HAVEGED: ArchiDroid entropy set to: $ENTROPY. Available entropy can't get below this level"
				echo "HAVEGED: Current available entropy: $(cat /proc/sys/kernel/random/entropy_avail)"
			fi
		;;
	esac
}

ADRELOAD() {
	case "$1" in
		"ALL")
			shift 1
			ADRELOAD "TMPFS"
			ADRELOAD "HAVEGED"
			ADRELOAD "FRANDOM"
			ADRELOAD "ADBLOCK"
			ADRELOAD "LOGCAT"
			;;
		"HOSTSLOCKED") ADNOTIFY "$1" ;;
		*)
			ADSTOP "$1"
			ADSTART "$1"
	esac
}

ADNOTIFY() {
	case "$1" in
		"TETHERING")
			ADSTOP "ADBLOCK"
			(
				sleep 2
				PID=""
				for PROCESS in "dnsmasq" "dnsmasq.real"; do
					PID="$(pidof "$PROCESS" 2>/dev/null)";
					if [[ ! -z "$PID" ]]; then
						break
					fi
				done
				while [[ -e "/proc/$PID" ]]; do
					sleep 1
				done
				ARCHIDROID_INIT "START" "ADBLOCK"
			) &
		;;
		"HOSTSLOCKED")
			mount -o remount,rw /system
			if [[ "$HOSTSLOCKED" -eq 1 ]]; then
				chattr +i /system/etc/hosts
			else
				chattr -i /system/etc/hosts
			fi
			mount -o remount,ro /system
		;;
	esac
}

# Initial variables, you should NOT change them unless you know what you're doing
AD="/data/media/0/ArchiDroid"
ADSYS="/system/archidroid"
ADDEV="$ADSYS/dev"
ADTMPFS="$ADSYS/tmpfs"
LOG="$AD/Init.log" # "/dev/null" is no verbose
#RUNONCELOG="$AD/RunOnce.log" # Unused
ADSTATUS="$ADTMPFS/ARCHIDROID_INIT_STATUS"

# Exit if barebones preset was used
if [[ -f "/system/archidroid/dev/PRESET_BAREBONES" ]]; then
	exit 0
fi

# Exit if user wiped data without reflashing
if [[ ! -f "/data/ARCHIDROID_DONT_REMOVE_ME" ]] ; then
	if ADMOUNTED "/data"; then
		sync
		reboot recovery || poweroff
	else
		# User is probably only charging his device, that's fine
		exit 0
	fi
fi

# Initial ArchiDroid dev status
if [[ "$(cat "$ADDEV/switches/Haveged")" = "Enabled" ]]; then
	HAVEGED=1
else
	HAVEGED=0
fi

if [[ "$(cat "$ADDEV/switches/Frandom")" = "Enabled" ]]; then
	FRANDOM=1
else
	FRANDOM=0
fi

if [[ "$(cat "$ADDEV/switches/Adblock")" = "Enabled" ]]; then
	ADBLOCK=1
	if [[ "$(cat "$ADDEV/switches/_Adblock/ProxyDNSes")" = "Enabled" ]]; then
		ADBLOCK_PROXYDNS=1
		if [[ "$(cat "$ADDEV/switches/_Adblock/_ProxyDNSes/LocalDNSes")" = "Enabled" ]]; then
			ADBLOCKLOCALDNSES=1
			if [[ "$(cat "$ADDEV/switches/_Adblock/_ProxyDNSes/_LocalDNSes/ForceLocalDNSes")" = "Enabled" ]]; then
				ADBLOCKSTRICTORDER=1
			else
				ADBLOCKSTRICTORDER=0
			fi
		else
			ADBLOCKLOCALDNSES=0
		fi
	else
		ADBLOCK_PROXYDNS=0
	fi
else
	ADBLOCK=0
fi

if [[ "$(cat "$ADDEV/switches/HostsLocked")" = "Enabled" ]]; then
	HOSTSLOCKED=1
else
	HOSTSLOCKED=0
fi

if [[ "$(cat "$ADDEV/switches/Logcat")" = "Enabled" ]]; then
	LOGCAT=1
else
	LOGCAT=0
fi

# RainbowLedOnBoot
LEDS=0
if [[ "$(cat "$ADDEV/switches/RainbowLedOnBoot")" = "Enabled" ]]; then
	if [[ -e "/sys/class/leds/led_r/brightness" && -e "/sys/class/leds/led_g/brightness" && -e "/sys/class/leds/led_b/brightness" ]]; then
		LEDS=1
	fi
fi

if [[ "$1" = "RELOAD" || "$1" = "STOP" || "$1" = "START" || "$1" = "NOTIFY" ]]; then
	# Allow that regardless of adstatus
	LOG="/dev/null"
	exec 1>"$LOG"
	exec 2>&1
	case "$1" in
		"RELOAD") ADRELOAD "$2" ;;
		"START") ADSTART "$2" ;;
		"STOP") ADSTOP "$2" ;;
		"NOTIFY") ADNOTIFY "$2" ;;
	esac
	exit 0
elif [[ ! -f "$ADSTATUS" ]]; then
	# First boot, good
	# debuggerd and init.d are executed in the nearly same moment, which may cause typical race condition here
	# It's very likely that these childs will enter this segment in the same moment, we must stop it right here
	# If we're not the lowest PID of all the PIDs from the same process, exit
	if [[ "$(pidof "$(basename "$0")" | awk '{print $1}')" != "$$" ]]; then
		exit 0
	fi
	ADSTART "TMPFS"
	echo "$$" > "$ADSTATUS"
else
	ADSIGNAL="$(cat $ADSTATUS)"
	if [[ "$ADSIGNAL" = "FINISHED" ]]; then
		# Something tried to execute already finished init, halt
		echo "This script has been executed already"
		exit 0
	elif [[ "$ADSIGNAL" = "RESTART" ]]; then
		# Backend restarts itself, good to know, allow that
		echo "$$" > "$ADSTATUS"
	elif [[ -d "/proc/$ADSIGNAL" ]]; then
		# Something tried to execute already running init, double-execution?
		exit 3
	else
		# Old PID is dead and didn't exit properly, allow that for now
		echo "$$" > "$ADSTATUS"
	fi
fi

# Parse args to variables
BACKGROUND=0
for ARG in "$@"; do
	case "$ARG" in
		"background") BACKGROUND=1 ;;
	esac
done

# Now we need to make sure that this is a background process to prevent slowing down bootup
if [[ "$BACKGROUND" -ne 1 ]]; then
	# We're not running in background, let's start a child and tell him that he's running in background
	echo "RESTART" > "$ADSTATUS"
	"$0" "background" "$@" &
	# Nothing to do here anymore, exit call
	exit 0
fi

# Redirect stdout and stderr to our log, just in case something bad happen
if [[ -f "$LOG" ]]; then
	mv "$LOG" "$LOG.old"
fi
exec 1>"$LOG"
exec 2>&1

date
echo "ArchiDroid $(getprop ro.archidroid.version)"
uname -a
echo "INFO: ArchiDroid_Init executed!"

echo "INFO: Waiting for bootanimation..."
LOOP=0
while ! pgrep bootanimation >/dev/null 2>&1 && ! pgrep boot-dmesg >/dev/null 2>&1 && [[ "$LOOP" -lt 10 ]]; do
	((LOOP++))
	sleep 1
done

if ! pgrep bootanimation >/dev/null 2>&1 && ! pgrep boot-dmesg >/dev/null 2>&1; then
	echo "INFO: Bootanimation didn't spawn in given period, aborting backend!"
	exit 0
else
	echo "INFO: Bootanimation spawned!"
fi


#   ____
#  / ___| ___   _ __  ___
# | |    / _ \ | '__|/ _ \
# | |___| (_) || |  |  __/
#  \____|\___/ |_|   \___|
#
# Which mode are we using?
# 0 - Sammy
# 1 - CyanogenMod
# 2 - Omni
ROM=0 # Default to sammy
if [[ "$(grep -qi "ro.cm.version" "/system/build.prop"; echo $?)" -eq 0 ]]; then
	ROM=1 # OK, definitely CM
elif [[ "$(grep -qi "ro.omni.version" "/system/build.prop"; echo $?)" -eq 0 ]]; then
	ROM=2 # OK, definitely Omni
fi

# Bring su daemon if available
if [[ ! -z "$(which daemonsu)" ]]; then
	echo "INFO: SuperSU daemon found, calling daemonsu!"
	daemonsu --auto-daemon &
fi

# Custom boot sound support
if [[ -f "$AD/PowerOn.wav" && ! -z "$(which tinyplay)" ]]; then
	tinyplay "$AD/PowerOn.wav" >/dev/null 2>&1 &
fi

# ArchiDroid Hardswap
if [[ "$(busybox swapon --help 2>&1 | grep -qi "\-p pri"; echo $?)" -eq 0 ]]; then
	HSEXTRA="-p 10"
fi
for HSPATH in "/cache" "/preload" "/storage/sdcard1" "/storage/extSdCard"; do
	if [[ -f "$HSPATH/ArchiDroid.swp" ]]; then
		echo "INFO: Found ArchiDroid swap file in $HSPATH directory, $(busybox du -mh "$HSPATH/ArchiDroid.swp" | awk '{print $1}')"
		busybox swapon $HSEXTRA "$HSPATH/ArchiDroid.swp" # Yes, we must break on spaces in this case
	fi
done

# ArchiDroid services
ADSTART "ALL"

# ArchiDroid Semaphore
# Wait until we see some android processes to consider boot is more or less complete (initial idea thanks to AndiP71)
# Also respect number of loops, maybe something went wrong
echo "INFO: Init Semaphore started"
LOOP=0
while ! pgrep com.android.systemu >/dev/null 2>&1 && [[ "$LOOP" -lt 600 ]]; do
	((LOOP++))
	if [[ "$LEDS" -ge 1 ]]; then
		while :; do
			case "$LEDS" in
				1) RED=10; GREEN=0; BLUE=0 ;;
				2) RED=20; GREEN=0; BLUE=0 ;;
				3) RED=30; GREEN=0; BLUE=0 ;;
				4) RED=40; GREEN=0; BLUE=0 ;;
				5) RED=40; GREEN=10; BLUE=0 ;;
				6) RED=40; GREEN=20; BLUE=0 ;;
				7) RED=40; GREEN=30; BLUE=0 ;;
				8) RED=40; GREEN=40; BLUE=0 ;;
				9) RED=30; GREEN=40; BLUE=0 ;;
				10) RED=20; GREEN=40; BLUE=0 ;;
				11) RED=10; GREEN=40; BLUE=0 ;;
				12) RED=0; GREEN=40; BLUE=0 ;;
				13) RED=0; GREEN=40; BLUE=10 ;;
				14) RED=0; GREEN=40; BLUE=20 ;;
				15) RED=0; GREEN=40; BLUE=30 ;;
				16) RED=0; GREEN=40; BLUE=40 ;;
				17) RED=0; GREEN=30; BLUE=40 ;;
				18) RED=0; GREEN=20; BLUE=40 ;;
				19) RED=0; GREEN=10; BLUE=40 ;;
				20) RED=0; GREEN=0; BLUE=40 ;;
				21) RED=10; GREEN=0; BLUE=40 ;;
				22) RED=20; GREEN=0; BLUE=40 ;;
				23) RED=30; GREEN=0; BLUE=40 ;;
				24) RED=40; GREEN=0; BLUE=40 ;;
				25) RED=30; GREEN=0; BLUE=30 ;;
				26) RED=20; GREEN=0; BLUE=20 ;;
				27) RED=10; GREEN=0; BLUE=10 ;;
				28) RED=0; GREEN=0; BLUE=0 ;;
				*) LEDS=1; break ;; # This is the last one, so we go back to the start
			esac
			echo "$RED" > "/sys/class/leds/led_r/brightness"
			echo "$GREEN" > "/sys/class/leds/led_g/brightness"
			echo "$BLUE" > "/sys/class/leds/led_b/brightness"
			((LEDS++))
			sleep 0.1
		done
	else
		sleep 2
	fi
done

if [[ "$LOOP" -ge 600 ]]; then
	echo "ERROR: I looped $LOOP times and needed to exit from infinite loop, not good (Init Semaphore)"
else
	echo "INFO: I looped $LOOP times and didn't have to exit from infinite loop, that's nice (Init Semaphore)"
fi

# Execute a reboot if we need it
if [[ -f "$AD/HARD_REBOOT_REQUIRED" ]]; then
	echo "INFO: HARD_REBOOT_REQUIRED found, I'm rebooting device now..."
	rm -f "$AD/SOFT_REBOOT_REQUIRED"
	rm -f "$AD/HARD_REBOOT_REQUIRED"
	if [[ -f "$ADSYS/system/reboot.wav" && ! -z "$(which tinyplay)" ]]; then
		tinyplay "$ADSYS/system/reboot.wav" >/dev/null 2>&1
	fi
	sync
	reboot
elif [[ -f "$AD/SOFT_REBOOT_REQUIRED" ]]; then
	echo "INFO: SOFT_REBOOT_REQUIRED found, I'm rebooting android interface now..."
	rm -f "$AD/SOFT_REBOOT_REQUIRED"
	if [[ -f "$ADSYS/system/reboot.wav" && ! -z "$(which tinyplay)" ]]; then
		tinyplay "$ADSYS/system/reboot.wav" >/dev/null 2>&1 &
	fi
	sync
	setprop ctl.restart surfaceflinger
	setprop ctl.restart zygote
fi

# Wait a little longer
sleep 30

####################################
# We have fully loaded android now #
####################################

# Delete RunOnce if needed
if [[ ! -z "$(which ARCHIDROID_RUNONCE)" ]]; then
	echo "WARNING: RunOnce found, trying to remove it!"
	mount -o remount,rw /system
	rm -f "$(which ARCHIDROID_RUNONCE)" "$AD/ARCHIDROID_RUNONCE_STATUS"
	if [[ -z "$(which ARCHIDROID_RUNONCE)" ]]; then
		echo "INFO: Success!"
		mount -o remount,ro /system
	else
		echo "ERROR: Failed!"
	fi
fi

# Finish
echo "FINISHED" > "$ADSTATUS"
echo "INFO: ArchiDroid Init finished"
date
exit 0
