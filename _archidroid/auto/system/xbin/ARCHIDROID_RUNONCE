#!/system/bin/sh

#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014-2015 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

ADMOUNTED() {
	mount 2>&1 | grep -qi "$1"
	return $?
}

# Initial variables, you should NOT change them unless you know what you're doing
AD="/data/media/0/ArchiDroid"
ADSYS="/system/archidroid"
ADDEV="$ADSYS/dev"
ADTMPFS="$ADSYS/tmpfs"
ADFIFO="$ADTMPFS/RunOnce.fifo"
LOG="$AD/RunOnce.log" # "/dev/null" is no verbose
ADSTATUS="$ADTMPFS/ARCHIDROID_RUNONCE_STATUS"

if [[ ! -d "$AD" ]]; then
	exit 0
fi

# Exit if barebones preset was used
if [[ -f /system/archidroid/dev/PRESET_BAREBONES ]]; then
	exit 0
fi

# Exit if user wiped data without reflashing
if [[ ! -f "/data/ARCHIDROID_DONT_REMOVE_ME" ]] ; then
	if ADMOUNTED "/data"; then
		sync
		reboot recovery || poweroff
	else
		# User is probably only charging his device, that's fine
		exit 0
	fi
fi

if [[ ! -f "$ADSTATUS" ]]; then
	# First boot, good
	# debuggerd and init.d are executed in the nearly same moment, which may cause typical race condition here
	# It's very likely that these childs will enter this segment in the same moment, we must stop it right here
	# If we're not the lowest PID of all the PIDs from the same process, exit
	if [[ "$(pidof "$(basename "$0")" | awk '{print $NF}')" != "$$" ]]; then
		exit 0
	fi
	ARCHIDROID_INIT "START" "TMPFS"
	echo "$$" > "$ADSTATUS"
	mkfifo "$ADFIFO"
else
	ADSIGNAL="$(cat "$ADSTATUS")"
	if [[ "$ADSIGNAL" = "FINISHED" ]]; then
		# Something tried to execute already finished init, halt
		echo "This script has been executed already"
		exit 0
	elif [[ "$ADSIGNAL" = "RESTART" ]]; then
		# Backend restarts itself, good to know, allow that
		echo "$$" > "$ADSTATUS"
	elif [[ -e "/proc/$ADSIGNAL" ]]; then
		# Something tried to execute already running init, double-execution?
		exit 3
	else
		# Old PID is dead and didn't exit properly, probably panic
		exit 4
	fi
fi

# Parse args to variables
BACKGROUND=0
for ARG in "$@"; do
	case "$ARG" in
		--background|background) BACKGROUND=1 ;;
	esac
done

# Now we need to make sure that this is a background process to prevent slowing down bootup
if [[ "$BACKGROUND" -ne 1 ]]; then
	echo "RESTART" > "$ADSTATUS"
	"$0" "--background" "$@" &
	exit 0
fi

# Redirect stdout and stderr to our log, just in case something bad happen
if [[ -f "$LOG" ]]; then
	mv "$LOG" "$LOG.old"
fi
exec 1>"$LOG"
exec 2>&1

echo "$(date +"%F %T") INFO: ArchiDroid_RunOnce executed!"
echo "$(date +"%F %T") INFO: ArchiDroid $(getprop ro.archidroid.version)"
echo "$(date +"%F %T") INFO: $(cat /proc/version)"

echo "$(date +"%F %T") INFO: Waiting for Zygote..."

LOOP=0
while [[ "$LOOP" -lt 10 ]] &&  ! pgrep zygote >/dev/null 2>&1; do
	((LOOP++))
	sleep 1
done

if ! pgrep zygote >/dev/null 2>&1; then
	echo "$(date +"%F %T") INFO: Zygote didn't spawn in given period, aborting backend!"
	exit 1
else
	echo "$(date +"%F %T") INFO: Zygote spawned!"
fi

DBUPDATE() {
	# Thanks to idcrisis, modified by JustArchi
	local TRY=0
	local VAL1=""
	local VAL2=""
	local ID=""

	while [[ "$TRY" -le 5 ]] ; do
		((TRY++))
		if [[ "$4" = "APPEND" ]]; then
			# Append mode, value should exist already then
			VAL1="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"
			VAL1="$VAL1$5$3"

			# Let's update it now
			sqlite3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$VAL1' where name='$2';" 2>/dev/null

			# See if it worked
			VAL2="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"

			if [[ "$VAL1" = "$VAL2" ]]; then
				# Looks good
				if [[ "$TRY" -gt 1 ]]; then
					echo "$(date +"%F %T") INFO: DBUPDATE APPEND SUCCEEDED with $*. It was our $TRY try"
				fi
				return 0
			else
				# We failed
				echo "$(date +"%F %T") WARNING: DBUPDATE APPEND FAILED with $*. This is our $TRY try"
				sleep 1
			fi
		else
			# Insert/Update mode, check if value already exists
			VAL1="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"
			if [[ -z "$VAL1" ]]; then
				# We don't have any value, insert mode
				ID='null' # This actually means that we follow auto incremented key value and not putting our own
				sqlite3 /data/data/com.android.providers.settings/databases/settings.db "insert into $1 values($ID, '$2', '$3');" 2>/dev/null
			elif [[ "$VAL1" = "$3" ]]; then
				# Value exists and is the same as the one we want to insert, that's great!
				return 0
			else
				# Value exists but is not the one we want, update mode
				sqlite3 /data/data/com.android.providers.settings/databases/settings.db "update $1 set value='$3' where name='$2';" 2>/dev/null
			fi

			# See if it worked
			VAL1="$(sqlite3 /data/data/com.android.providers.settings/databases/settings.db "select value from $1 where name='$2';" 2>/dev/null)"
			if [[ "$VAL1" = "$3" ]]; then
				# Value exists and is the same as the one we want to insert, that's great!
				if [[ "$TRY" -gt 1 ]]; then
					echo "$(date +"%F %T") INFO: DBUPDATE APPEND SUCCEEDED with $*. It was our $TRY try"
				fi
				return 0
			else
				# Oops, something gone wrong
				echo "$(date +"%F %T") WARNING: DBUPDATE FAILED with $*. This is our $TRY try"
				sleep 1
			fi
		fi
	done
	echo "$(date +"%F %T") ERROR: Could not update $* after $TRY times. I'm giving up here, please investigate!"
	return 1
}


#   ____
#  / ___| ___   _ __  ___
# | |    / _ \ | '__|/ _ \
# | |___| (_) || |  |  __/
#  \____|\___/ |_|   \___|
#

# Custom boot sound support
if [[ -f "$AD/PowerOn.wav" && -n "$(which tinyplay)" ]]; then
	tinyplay "$AD/PowerOn.wav" >/dev/null 2>&1 &
fi

# Don't force install mode, unless FORCE file exists
if [[ -f "$AD/FORCE" ]]; then
	FORCE=1
	echo "$(date +"%F %T") WARNING: Forcing Install mode"
else
	FORCE=0
	echo "$(date +"%F %T") INFO: Normal mode"
fi

# Let's find out what we want from our RunOnce
ADRELOAD=0
ADMANY=0

if [[ -f "$AD/INSTALL" || "$FORCE" -eq 1 ]]; then
	echo "$(date +"%F %T") INFO: Install mode detected"
	if [[ -d "$AD/FIRSTBOOT/DATA" ]]; then
		(
			mADMANY="$ADMANY"
			find "$AD/FIRSTBOOT/DATA" -mindepth 1 -maxdepth 1 -type d | while read FOLDER; do
				((mADMANY++))
			done
			echo "$mADMANY" > "$ADFIFO"
		) &
		ADMANY="$(cat "$ADFIFO")"
	fi
	echo "$(date +"%F %T") INFO: Found $ADMANY folders for data merging"
	DBUPDATE=1
elif [[ -f "$AD/UPDATE" ]]; then
	echo "$(date +"%F %T") INFO: Update mode detected. Turning off ADMANY and DBUPDATE"
	DBUPDATE=0
else
	# Panic
	echo "$(date +"%F %T") ERROR: Could not detect Install/Update mode, ABORTING RUNONCE, PLEASE INVESTIGATE"
	echo "FINISHED" > "$ADSTATUS"
	ARCHIDROID_INIT "--background" &
	exit 2
fi

# RainbowLedOnBoot
LEDS=0
if [[ "$(cat "$ADDEV/switches/RainbowLedOnBoot")" = "Enabled" ]]; then
	if [[ -e "/sys/class/leds/led_r/brightness" && -e "/sys/class/leds/led_g/brightness" && -e "/sys/class/leds/led_b/brightness" ]]; then
		LEDS=1
	fi
fi

# ArchiDroid Semaphore
# Wait until we see some android processes to consider boot is more or less complete (initial idea thanks to AndiP71)
# Also respect number of loops, maybe something went wrong
echo "$(date +"%F %T") INFO: RunOnce Semaphore started"
LOOP=0
until [[ "$LOOP" -ge 600 ]] || pgrep com.android.systemui >/dev/null 2>&1; do
	((LOOP++))
	if [[ "$DBUPDATE" -eq 1 ]]; then
		if [[ -f /data/data/com.android.providers.settings/databases/settings.db ]]; then
			echo "$(date +"%F %T") INFO: settings.db created! Performing DBUPDATE"

			# Faster animations
			DBUPDATE global animator_duration_scale 0.5
			DBUPDATE global transition_animation_scale 0.5
			DBUPDATE global window_animation_scale 0.5

			# Circle battery
			DBUPDATE system status_bar_battery_style 2 # Circle icon
			DBUPDATE system status_bar_show_battery_percent 1 # Text inside the icon

			# General fixes
			DBUPDATE global development_settings_enabled 1 # Enable development settings
			DBUPDATE global wifi_scan_always_enabled 0 # Disable wi-fi scanning
			DBUPDATE secure advanced_reboot 1 # Enable advanced reboot
			DBUPDATE secure button_backlight_timeout 1000 # Set backlight timeout to 1 second
			DBUPDATE secure install_non_market_apps 1 # Allow installing APKs from unknown sources

			# And don't execute twice
			echo "$(date +"%F %T") INFO: Finished DBUPDATE"
			DBUPDATE=0
		fi
	fi

	# Now let's MAKE SURE that our settings are in fact applied, only if we don't have shared_prefs already (prevent non-clean override)
	if [[ "$ADMANY" -gt 0 ]]; then
		(
			mADMANY="$ADMANY"
			find "$AD/FIRSTBOOT/DATA" -mindepth 1 -maxdepth 1 -type d | while read FOLDER; do
				FOLDERSHORT="$(basename "$FOLDER")"
				if [[ -d "/data/data/$FOLDERSHORT" ]]; then

					echo "$(date +"%F %T") INFO: Merging settings for $FOLDER"

					# Firstly, copy recursive everything i
					find "$FOLDER" -mindepth 1 -maxdepth 1 | while read TOCOPY; do
						cp -R "$TOCOPY" "/data/data/$FOLDERSHORT/"
					done

					ADOWNER="$(busybox ls -ld "/data/data/$FOLDERSHORT" | awk '{print $3}')"
					busybox chown -hR "$ADOWNER.$ADOWNER" "/data/data/$FOLDERSHORT"

					# Apply permissions for folders
					find "/data/data/$FOLDERSHORT" -type d -mindepth 1 | while read mFOLDER; do
						case "$(basename "$mFOLDER")" in # This will match filenames
							*) chmod 771 "$mFOLDER"
						esac
					done

					# Apply permissions for files
					find "/data/data/$FOLDERSHORT" -type f -mindepth 1 | while read mFILE; do
	#					case "$(echo "$mFILE" | awk -F '.' '{print $NF}')" in # This will match extensions, like jar
	#						"jar") chmod 664 "$mFILE" ;;
	#						*) chmod 660 "$mFILE"
	#					esac
						case "$(basename "$mFILE")" in # This will match filenames
	#						"XposedBridge.jar") chmod 664 "$mFILE" ;;
							*) chmod 660 "$mFILE"
						esac
					done

					# And we're done!
					rm -rf "$FOLDER"
					((mADMANY--))
					echo "$(date +"%F %T") INFO: Merging done! $ADMANY to go"
					echo "$mADMANY" > "$ADFIFO"
					exit 0
				fi
			done
			echo "$mADMANY" > "$ADFIFO"
		) &
		ADMANY="$(cat "$ADFIFO")"
	fi

	# Sleeping time

	if [[ "$LEDS" -ge 1 ]]; then
		while :; do
			case "$LEDS" in
				1) RED=10; GREEN=0; BLUE=0 ;;
				2) RED=20; GREEN=0; BLUE=0 ;;
				3) RED=30; GREEN=0; BLUE=0 ;;
				4) RED=40; GREEN=0; BLUE=0 ;;
				5) RED=40; GREEN=10; BLUE=0 ;;
				6) RED=40; GREEN=20; BLUE=0 ;;
				7) RED=40; GREEN=30; BLUE=0 ;;
				8) RED=40; GREEN=40; BLUE=0 ;;
				9) RED=30; GREEN=40; BLUE=0 ;;
				10) RED=20; GREEN=40; BLUE=0 ;;
				11) RED=10; GREEN=40; BLUE=0 ;;
				12) RED=0; GREEN=40; BLUE=0 ;;
				13) RED=0; GREEN=40; BLUE=10 ;;
				14) RED=0; GREEN=40; BLUE=20 ;;
				15) RED=0; GREEN=40; BLUE=30 ;;
				16) RED=0; GREEN=40; BLUE=40 ;;
				17) RED=0; GREEN=30; BLUE=40 ;;
				18) RED=0; GREEN=20; BLUE=40 ;;
				19) RED=0; GREEN=10; BLUE=40 ;;
				20) RED=0; GREEN=0; BLUE=40 ;;
				21) RED=10; GREEN=0; BLUE=40 ;;
				22) RED=20; GREEN=0; BLUE=40 ;;
				23) RED=30; GREEN=0; BLUE=40 ;;
				24) RED=40; GREEN=0; BLUE=40 ;;
				25) RED=30; GREEN=0; BLUE=30 ;;
				26) RED=20; GREEN=0; BLUE=20 ;;
				27) RED=10; GREEN=0; BLUE=10 ;;
				28) RED=0; GREEN=0; BLUE=0 ;;
				*) LEDS=1; break ;; # This is the last one, so we go back to the start
			esac
			echo "$RED" > "/sys/class/leds/led_r/brightness"
			echo "$GREEN" > "/sys/class/leds/led_g/brightness"
			echo "$BLUE" > "/sys/class/leds/led_b/brightness"
			((LEDS++))
			sleep 0.1
		done
	else
		sleep 2
	fi
done

if [[ "$LOOP" -ge 600 ]]; then
	echo "$(date +"%F %T") WARNING: I looped $LOOP times and needed to exit from infinite loop, not good (RunOnce Semaphore)"
else
	echo "$(date +"%F %T") INFO: I looped $LOOP times and didn't have to exit from infinite loop, that's nice (RunOnce Semaphore)"
fi

# I'm runonce script so let's clean everything and delete myself
rm -f "$ADFIFO" "$AD/INSTALL" "$AD/UPDATE" "$AD/FORCE"
rm -rf "$AD/FIRSTBOOT"

# Turn on the lights
ARCHIDROID_INIT "--background" &

# Finish
echo "FINISHED" > "$ADSTATUS"
echo "$(date +"%F %T") INFO: ArchiDroid RunOnce finished"

# Execute a reboot if we need it
if [[ "$ADRELOAD" -eq 1 ]]; then
	echo "$(date +"%F %T") INFO: Reboot required, I'm rebooting the device right now"
	if [[ -f "$ADSYS/system/reboot.wav" && -n "$(which tinyplay)" ]]; then
		tinyplay "$ADSYS/system/reboot.wav" >/dev/null 2>&1 &
	fi
	setprop ctl.restart surfaceflinger
	setprop ctl.restart zygote
fi

exit 0
