#!/system/bin/sh

#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2014 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AD="/data/media/0/ArchiDroid"
ADSYS="/system/archidroid"
ADTMPFS="$ADSYS/tmpfs"
LOG="$AD/DNS.log"
ADSTATUS="$ADTMPFS/ARCHIDROID_MONITOR_DNS"

DNSPROXY=0
RESOLV=0

WAITFORNETD="3"

exec 1>"$LOG"
exec 2>&1

REGENERATE_RESOLV() {
	if [[ "$RESOLV" -eq 0 ]]; then
		return 0
	fi

	{
		echo "nameserver $DNS1"
		echo "nameserver $DNS2"
		cat "/system/etc/resolv.conf"
	} > "$ADTMPFS/resolv.conf"
}

RESET_DNSES() {
	if [[ "$DNSPROXY" -eq 0 ]]; then
		return 0
	fi

	sleep "$WAITFORNETD" # Make sure that we're the last
	local IFPROBE="$(busybox route | grep "default" | head -n 1 | awk '{print $NF}')"
	if [[ ! -z "$IFPROBE" ]]; then
		echo "$(date) Detected new network interface: $IFPROBE. Forwarding $IFPROBE DNS requests to 127.0.0.1!"
		ndc resolver setifdns "$IFPROBE" "" "127.0.0.1"
	else
		# This should never happen
		echo "$(date) WARNING: Could not detect default interface! Proxying all DNS requests to 127.0.0.1!"
		for IF in $(getprop mobiledata.interfaces | tr ',' '\n'); do
			ndc resolver setifdns "$IF" "" "127.0.0.1"
		done
	fi
}

MONITOR_DNS() {
	DNS1="$(getprop net.dns1)"
	DNS2="$(getprop net.dns2)"
	local CURDNS1="$DNS1"
	local CURDNS2="$DNS2"
	echo "$(date) Current DNSes: $DNS1, $DNS2"

	setprop "net.dns1" "127.0.0.1" # This is only for us to get notified from netd
	REGENERATE_RESOLV
	if [[ ! -z "$DNS1" && "$DNS1" != "127.0.0.1" ]]; then
		setprop "archidroid.adblock.dns1" "$DNS1" # Store the original DNS, so we can restore it later
		RESET_DNSES
	fi

	while :; do
		CURDNS1="$(getprop net.dns1)"
		if [[ "$CURDNS1" != "127.0.0.1" ]]; then
			CURDNS2="$(getprop net.dns2)"
			echo "$(date) Detected DNS change!"
			echo "$(date) Previous: $DNS1, $DNS2"
			echo "$(date) Current: $CURDNS1, $CURDNS2"
			DNS1="$CURDNS1"
			DNS2="$CURDNS2"
			setprop "net.dns1" "127.0.0.1" # This is only for us to get notified from netd
			setprop "archidroid.adblock.dns1" "$DNS1" # Store the original DNS, so we can restore it later
			REGENERATE_RESOLV
			RESET_DNSES
		fi
		sleep 1
	done
}

echo "$(date) Active!"

if [[ -f "$ADSTATUS" ]]; then
	echo "$(date) Previous instance found, cleaning up..."
	rm -f "$ADSTATUS"
	sleep 1 # Give it some time to cleanup and finish
fi

echo "$$" > "$ADSTATUS"
trap 'kill $(jobs -p); rm -f "$ADSTATUS"' SIGINT SIGTERM EXIT

# Parse ARGs
for ARG in "$@"; do
	case "$ARG" in
		--dnsproxy|dnsproxy) DNSPROXY=1 ;;
		--resolv|resolv) RESOLV=1 ;;
	esac
done

MONITOR_DNS &

if [[ ! -z "$(which inotifywait)" ]]; then
	inotifywait -qq -e delete -e modify "$ADSTATUS"
else
	wait # Fallback, should never happen
fi

echo "$(date) Shutting down..."

exit 0
