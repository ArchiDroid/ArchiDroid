#!/system/bin/sh

#     _             _     _ ____            _     _
#    / \   _ __ ___| |__ (_)  _ \ _ __ ___ (_) __| |
#   / _ \ | '__/ __| '_ \| | | | | '__/ _ \| |/ _` |
#  / ___ \| | | (__| | | | | |_| | | | (_) | | (_| |
# /_/   \_\_|  \___|_| |_|_|____/|_|  \___/|_|\__,_|
#
# Copyright 2015 Łukasz "JustArchi" Domeradzki
# Contact: JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

AD="/data/media/0/ArchiDroid"
ADSYS="/system/archidroid"
ADDEV="$ADSYS/dev"
ADTMPFS="/dev/archidroid"

AD_LAST_NETWORK_FILE="$ADTMPFS/LAST_NETWORK_DATA"
AD_DATA_EVENTS_DIR="$AD/System/Events"
AD_DEV_EVENTS_DIR="$ADTMPFS/Events"
LOG="$AD/EVENT_LISTENER.log"
ADSTATUS="$ADTMPFS/ARCHIDROID_EVENT_LISTENER.PID"

exec 1>"$LOG"
exec 2>&1

REFRESH_RESOLV() {
	if [[ "$(cat "$ADDEV/switches/_Adblock/_ProxyDNSes/LocalDNSes")" = "Enabled" ]]; then
		{
			if [[ -f "$AD_LAST_NETWORK_FILE" ]]; then
				for DNS in $(cut -d ' ' -f 2- < "$AD_LAST_NETWORK_FILE"); do
					echo "nameserver $DNS"
				done
			fi
			cat "/system/etc/resolv.conf"
		} > "$ADTMPFS/resolv.conf"
	fi
}

RESET_DNSES() {
	if [[ -f "$AD_LAST_NETWORK_FILE" ]]; then
		local LAST_NETWORK_DATA="$(cat "$AD_LAST_NETWORK_FILE")"
		local LAST_NETWORK_ID="$(echo "$LAST_NETWORK_DATA" | cut -d ' ' -f 1)"
		local DNS1="$(echo "$LAST_NETWORK_DATA" | cut -d ' ' -f 2)"
		local DNS2="$(echo "$LAST_NETWORK_DATA" | cut -d ' ' -f 3)"
		local DNS3="$(echo "$LAST_NETWORK_DATA" | cut -d ' ' -f 4)"
		local DNS4="$(echo "$LAST_NETWORK_DATA" | cut -d ' ' -f 5)"

		ndc resolver setnetdns "$LAST_NETWORK_ID" "" "$DNS1" "$DNS2" "$DNS3" "$DNS4"
		ndc resolver flushnet "$LAST_NETWORK_ID"
	fi
}

SET_DNSES() {
	local APPLY=0
	if [[ -n "$1" && -n "$2" ]]; then
		APPLY=1
		local LAST_NETWORK_ID="$1"
		local DNS1="$2"
		echo "$LAST_NETWORK_ID $2 $3 $4 $5" > "$AD_LAST_NETWORK_FILE" # Save last network ID and up to 4 DNSes
	elif [[ -f "$AD_LAST_NETWORK_FILE" ]]; then
		APPLY=1
		local LAST_NETWORK_DATA="$(cat "$AD_LAST_NETWORK_FILE")"
		local LAST_NETWORK_ID="$(echo "$LAST_NETWORK_DATA" | cut -d ' ' -f 1)"
		local DNS1="$(echo "$LAST_NETWORK_DATA" | cut -d ' ' -f 2)"
	fi

	if [[ "$APPLY" -eq 1 && -e "$ADTMPFS/DNSMASQ.PID" && -e "/proc/$(cat "$ADTMPFS/DNSMASQ.PID")" ]]; then
		REFRESH_RESOLV
		if echo "$DNS1" | grep -q ':'; then # IPv6
			ndc resolver setnetdns "$LAST_NETWORK_ID" "" "::1"
		else # IPv4
			ndc resolver setnetdns "$LAST_NETWORK_ID" "" "127.0.0.1"
		fi
		ndc resolver flushnet "$LAST_NETWORK_ID"
	fi
}

HANDLE_EVENT() {
	if [[ -n "$1" ]]; then
		echo "$(date +"%F %T") EVENT: $1"
		case "$1" in
			"CONNECTIVITY_APPLY") SET_DNSES ;; # Used by ArchiDroid_Init to apply adblock after enabling
			"CONNECTIVITY_CHANGE "*) SET_DNSES $(echo "$1" | cut -d ' ' -f 2-) ;; # Used by ArchiDroid APK to notify about new NetworkID
			"CONNECTIVITY_RESET") RESET_DNSES ;; # Used by ArchiDroid_Init to reset DNSes back to original state after disabling adblock
			"REFRESH_RESOLV") REFRESH_RESOLV ;; # Used by ArchiDroid_Init when dnsmasq with LocalDNSes is starting up
			"TETHERING "*) ARCHIDROID_INIT "NOTIFY" "$1" ;; # Used by dnsmasq to notify us about tethering event
		esac
	fi
}

LISTEN_FOR_DEV_EVENTS() {
	if [[ -d "$AD_DEV_EVENTS_DIR" ]]; then
		find "$AD_DEV_EVENTS_DIR" -mindepth 1 -maxdepth 1 -type f | while read EVENT_FILE; do
			rm -f "$EVENT_FILE"
		done
	else
		mkdir -p "$AD_DEV_EVENTS_DIR"
		chcon "u:object_r:net_data_file:s0" "$AD_DEV_EVENTS_DIR" # Set proper context to allow netd (dnsmasq hook) to write
	fi
	while [[ -d "$AD_DEV_EVENTS_DIR" ]]; do
		EVENT_FILE="$(inotifywait -q -e create -e moved_to "$AD_DEV_EVENTS_DIR" | cut -d ' ' -f 3-)"
		while read EVENT; do
			HANDLE_EVENT "$EVENT" &
		done < "${AD_DEV_EVENTS_DIR}/${EVENT_FILE}"
		rm -f "${AD_DEV_EVENTS_DIR}/${EVENT_FILE}"
	done
}

LISTEN_FOR_DATA_EVENTS() {
	if [[ -d "$AD_DATA_EVENTS_DIR" ]]; then
		find "$AD_DATA_EVENTS_DIR" -mindepth 1 -maxdepth 1 -type f | while read EVENT_FILE; do
			rm -f "$EVENT_FILE"
		done
	else
		mkdir -p "$AD_DATA_EVENTS_DIR"
	fi
	chmod 777 "$AD_DATA_EVENTS_DIR" # Allow everyone to write
	while [[ -d "$AD_DATA_EVENTS_DIR" ]]; do
		EVENT_FILE="$(inotifywait -q -e create -e moved_to "$AD_DATA_EVENTS_DIR" | cut -d ' ' -f 3-)"
		while read EVENT; do
			HANDLE_EVENT "$EVENT" &
		done < "${AD_DATA_EVENTS_DIR}/${EVENT_FILE}"
		rm -f "${AD_DATA_EVENTS_DIR}/${EVENT_FILE}"
	done
}

echo "$(date +"%F %T") INFO: ArchiDroid_Event_Listener executed!"

if [[ -f "$ADSTATUS" ]]; then
	echo "$(date +"%F %T") Previous instance found, cleaning up..."
	rm -f "$ADSTATUS"
	sleep 1 # Give it some time to cleanup and finish
fi

echo "$$" > "$ADSTATUS"
trap 'kill $(jobs -p); rm -f "$ADSTATUS"' SIGINT SIGTERM EXIT

LISTEN_FOR_DEV_EVENTS &
LISTEN_FOR_DATA_EVENTS &

inotifywait -qq -e delete -e modify "$ADSTATUS"

echo "$(date +"%F %T") Shutting down..."

exit 0
